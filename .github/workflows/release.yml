name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  build-java:
    name: Build Java Client
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Set up JDK 11
        uses: actions/setup-java@v5
        with:
          distribution: 'corretto'
          java-version: '11'
          cache: 'maven'
      
      - name: Get version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Build Java Client
        run: |
          mvn clean package
          JAR_FILE=$(find target -maxdepth 1 -name "ExchangeFlow-*.jar" \
            -not -name "*-original.jar" \
            -not -name "*-sources.jar" \
            -not -name "*-test-sources.jar" | head -n 1)
          if [ -z "$JAR_FILE" ]; then
            echo "Error: Could not find JAR file"
            ls -la target/
            exit 1
          fi
          echo "Found JAR: $JAR_FILE"
          
          # Verify manifest
          jar xf "$JAR_FILE" META-INF/MANIFEST.MF
          if grep -q "Main-Class" META-INF/MANIFEST.MF; then
            echo "✓ JAR has Main-Class"
          else
            echo "✗ Missing Main-Class"
            exit 1
          fi
          rm -rf META-INF
          
          cp "$JAR_FILE" ExchangeFlow-${{ steps.get_version.outputs.VERSION }}.jar
      
      - name: Upload JAR
        uses: actions/upload-artifact@v5
        with:
          name: java-jar
          path: ExchangeFlow-${{ steps.get_version.outputs.VERSION }}.jar

  build-rust-linux:
    name: Build Rust Server (Linux)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            cross: true
          - target: aarch64-unknown-linux-gnu
            cross: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ matrix.target }}
      
      - name: Get version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Install cargo-zigbuild (for ARM64 cross-compilation)
        if: matrix.cross == true
        run: |
          pip3 install ziglang
          cargo install cargo-zigbuild
      
      - name: Build
        working-directory: mock-trading-server
        run: |
          if [ "${{ matrix.cross }}" == "true" ]; then
            cargo zigbuild --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
      
      - name: Prepare binary
        run: |
          ARCH=$(echo ${{ matrix.target }} | cut -d'-' -f1)
          if [ "$ARCH" = "x86_64" ]; then
            SUFFIX="linux-x86_64"
          else
            SUFFIX="linux-aarch64"
          fi
          cp mock-trading-server/target/${{ matrix.target }}/release/mock-trading-server \
             mock-trading-server-${{ steps.get_version.outputs.VERSION }}-${SUFFIX}
          strip mock-trading-server-${{ steps.get_version.outputs.VERSION }}-${SUFFIX} || true
      
      - name: Upload binary
        uses: actions/upload-artifact@v5
        with:
          name: rust-${{ matrix.target }}
          path: mock-trading-server-${{ steps.get_version.outputs.VERSION }}-*

  build-rust-macos:
    name: Build Rust Server (macOS)
    runs-on: macos-latest
    strategy:
      matrix:
        target: [x86_64-apple-darwin, aarch64-apple-darwin]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ matrix.target }}
      
      - name: Get version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Build
        working-directory: mock-trading-server
        run: cargo build --release --target ${{ matrix.target }}
      
      - name: Prepare binary
        run: |
          ARCH=$(echo ${{ matrix.target }} | sed 's/-apple-darwin//')
          if [ "$ARCH" = "x86_64" ]; then
            SUFFIX="macos-x86_64"
          else
            SUFFIX="macos-arm64"
          fi
          cp mock-trading-server/target/${{ matrix.target }}/release/mock-trading-server \
             mock-trading-server-${{ steps.get_version.outputs.VERSION }}-${SUFFIX}
      
      - name: Upload binary
        uses: actions/upload-artifact@v5
        with:
          name: rust-${{ matrix.target }}
          path: mock-trading-server-${{ steps.get_version.outputs.VERSION }}-*

  build-rust-windows:
    name: Build Rust Server (Windows)
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
      
      - name: Get version
        id: get_version
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Build
        working-directory: mock-trading-server
        run: cargo build --release
      
      - name: Prepare binary
        shell: bash
        run: |
          cp mock-trading-server/target/release/mock-trading-server.exe \
             mock-trading-server-${{ steps.get_version.outputs.VERSION }}-windows-x86_64.exe
      
      - name: Upload binary
        uses: actions/upload-artifact@v5
        with:
          name: rust-windows
          path: mock-trading-server-${{ steps.get_version.outputs.VERSION }}-windows-x86_64.exe

  build-cpp-linux:
    name: Build C++ Client (Linux)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - arch: x86_64
            platform: linux/amd64
            container: public.ecr.aws/amazonlinux/amazonlinux:2023
          - arch: aarch64
            platform: linux/arm64
            container: public.ecr.aws/amazonlinux/amazonlinux:2023
    steps:
      - name: Set up QEMU
        if: matrix.arch == 'aarch64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          submodules: recursive
      
      - name: Get version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Build in container
        run: |
          docker run --rm --platform ${{ matrix.platform }} \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            ${{ matrix.container }} \
            bash -c '
              yum install -y gcc-c++ make git tar gzip openssl-devel python3-pip zlib-devel
              pip3 install cmake --upgrade
              export PATH="/usr/local/bin:$HOME/.local/bin:$PATH"
              cd cpp-client
              cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_POLICY_VERSION_MINIMUM=3.5
              cmake --build build --config Release
              cd build
              tar -czf ../../cpp-client-${{ steps.get_version.outputs.VERSION }}-linux-${{ matrix.arch }}.tar.gz hft_client
            '
      
      - name: Upload artifact
        uses: actions/upload-artifact@v5
        with:
          name: cpp-linux-${{ matrix.arch }}
          path: cpp-client-${{ steps.get_version.outputs.VERSION }}-linux-${{ matrix.arch }}.tar.gz

  build-cpp-macos:
    name: Build C++ Client (macOS)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-13
            arch: x86_64
          - os: macos-14
            arch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          submodules: recursive
      
      - name: Install dependencies
        run: |
          brew install cmake openssl@3
      
      - name: Get version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Build
        working-directory: cpp-client
        run: |
          export OPENSSL_ROOT_DIR=$(brew --prefix openssl@3)
          cmake -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DOPENSSL_ROOT_DIR=$OPENSSL_ROOT_DIR
          cmake --build build --config Release
      
      - name: Create tarball
        run: |
          cd cpp-client/build
          tar -czf ../../cpp-client-${{ steps.get_version.outputs.VERSION }}-macos-${{ matrix.arch }}.tar.gz hft_client
      
      - name: Upload artifact
        uses: actions/upload-artifact@v5
        with:
          name: cpp-macos-${{ matrix.arch }}
          path: cpp-client-${{ steps.get_version.outputs.VERSION }}-macos-${{ matrix.arch }}.tar.gz

  build-cpp-windows:
    name: Build C++ Client (Windows)
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          submodules: recursive
      
      - name: Setup vcpkg
        run: |
          git clone https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          .\bootstrap-vcpkg.bat
          .\vcpkg integrate install
      
      - name: Install dependencies
        run: |
          cd vcpkg
          .\vcpkg install openssl:x64-windows zlib:x64-windows
      
      - name: Get version
        id: get_version
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Build
        shell: bash
        working-directory: cpp-client
        run: |
          cmake -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake
          cmake --build build --config Release
      
      - name: Copy DLLs
        shell: bash
        run: |
          cp vcpkg/installed/x64-windows/bin/libssl-3-x64.dll cpp-client/build/Release/
          cp vcpkg/installed/x64-windows/bin/libcrypto-3-x64.dll cpp-client/build/Release/
          cp "C:/Windows/System32/msvcp140.dll" cpp-client/build/Release/ || true
          cp "C:/Windows/System32/vcruntime140.dll" cpp-client/build/Release/ || true
          cp "C:/Windows/System32/vcruntime140_1.dll" cpp-client/build/Release/ || true
      
      - name: Create archive
        shell: bash
        run: |
          cd cpp-client/build/Release
          7z a ../../../cpp-client-${{ steps.get_version.outputs.VERSION }}-windows-x86_64.zip *.exe *.dll
      
      - name: Upload artifact
        uses: actions/upload-artifact@v5
        with:
          name: cpp-windows-x86_64
          path: cpp-client-${{ steps.get_version.outputs.VERSION }}-windows-x86_64.zip

  create-release:
    name: Create GitHub Release
    needs: [build-java, build-rust-linux, build-rust-macos, build-rust-windows, build-cpp-linux, build-cpp-macos, build-cpp-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: Get version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Download all artifacts
        uses: actions/download-artifact@v6
        with:
          path: release-artifacts
      
      - name: List artifacts
        run: |
          echo "Downloaded artifacts:"
          find release-artifacts -type f
      
      - name: Create configuration bundle
        run: |
          cd release-configs
          zip -r ../config-samples-${{ steps.get_version.outputs.VERSION }}.zip .
          cd ..
      
      - name: Organize release files
        run: |
          mkdir release-files
          find release-artifacts -type f -exec cp {} release-files/ \;
          cp config-samples-${{ steps.get_version.outputs.VERSION }}.zip release-files/
          ls -lh release-files/
      
      - name: Generate release notes
        run: |
          PREVIOUS_TAG=$(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            COMMITS=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          cat > release_notes.md << EOF
          ## Release ${{ steps.get_version.outputs.VERSION }}
          
          ### What's Changed
          
          ${COMMITS}
          
          ### 📦 Components
          
          - **Java Trading Client** - ✅ Cross-platform (all architectures)
          - **Rust Mock Server** - ✅ Linux (x86_64 & ARM64/Graviton), macOS (Intel & Apple Silicon), Windows
          - **C++ Client** - ✅ Multi-platform: Linux (x86_64 & ARM64/Graviton), macOS (Intel & Apple Silicon), Windows
          - **Configuration Samples** - 📝 All config files with documentation
          
          ### 🚀 Quick Start
          
          1. Download \`config-samples-${{ steps.get_version.outputs.VERSION }}.zip\`
          2. Extract and rename config files as needed
          3. Download binaries for your platform
          4. Run!
          
          **Java Client:**
          \`\`\`bash
          java -jar ExchangeFlow-${{ steps.get_version.outputs.VERSION }}.jar
          \`\`\`
          
          **C++ Client (choose your platform):**
          - **Linux x86_64:** 
            \`\`\`bash
            tar -xzf cpp-client-${{ steps.get_version.outputs.VERSION }}-linux-x86_64.tar.gz
            ./hft_client
            \`\`\`
          - **Linux ARM64 (Graviton2/3/4):** 
            \`\`\`bash
            tar -xzf cpp-client-${{ steps.get_version.outputs.VERSION }}-linux-aarch64.tar.gz
            ./hft_client
            \`\`\`
          - **macOS Intel:** 
            \`\`\`bash
            tar -xzf cpp-client-${{ steps.get_version.outputs.VERSION }}-macos-x86_64.tar.gz
            ./hft_client
            \`\`\`
          - **macOS Apple Silicon:** 
            \`\`\`bash
            tar -xzf cpp-client-${{ steps.get_version.outputs.VERSION }}-macos-arm64.tar.gz
            ./hft_client
            \`\`\`
          - **Windows:** 
            \`\`\`powershell
            Expand-Archive cpp-client-${{ steps.get_version.outputs.VERSION }}-windows-x86_64.zip
            .\\hft_client.exe
            \`\`\`
          
          **Rust Server (choose your platform):**
          - **Linux x86_64:** \`./mock-trading-server-${{ steps.get_version.outputs.VERSION }}-linux-x86_64\`
          - **Linux ARM64 (Graviton):** \`./mock-trading-server-${{ steps.get_version.outputs.VERSION }}-linux-aarch64\`
          - **macOS Intel:** \`./mock-trading-server-${{ steps.get_version.outputs.VERSION }}-macos-x86_64\`
          - **macOS Apple Silicon:** \`./mock-trading-server-${{ steps.get_version.outputs.VERSION }}-macos-arm64\`
          - **Windows:** \`mock-trading-server-${{ steps.get_version.outputs.VERSION }}-windows-x86_64.exe\`
          
          ### 📋 Requirements
          
          - Java 11+ (for client)
          - Configuration files (included in config-samples.zip)
          - See README in config bundle for details
          EOF
      
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          body_path: release_notes.md
          files: release-files/*
          draft: false
          prerelease: false
