name: Build Pull Request

on: [pull_request]

permissions:
  contents: read

jobs:
  java-client:
    name: Build Java Client
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: Set up JDK 11
        uses: actions/setup-java@v5
        with:
          distribution: 'corretto'
          java-version: '11'
          cache: 'maven'
      
      - name: Build with Maven
        run: mvn clean package -DskipTests
      
      - name: Run tests
        run: mvn test
      
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v5
        with:
          name: java-client-jar
          path: target/*.jar
          retention-days: 7

  rust-server:
    name: Build Rust Mock Trading Server
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: mock-trading-server
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
      
      - name: Check formatting
        run: cargo fmt --check
        continue-on-error: true
      
      - name: Run Clippy
        run: cargo clippy -- -D warnings
        continue-on-error: true
      
      - name: Build
        run: cargo build --release
      
      - name: Run tests
        run: cargo test
      
      - name: Upload binary
        uses: actions/upload-artifact@v5
        with:
          name: rust-server-binary
          path: mock-trading-server/target/release/mock-trading-server
          retention-days: 7

  cpp-client-linux:
    name: Build C++ Client (Linux)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: cpp-client
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          submodules: recursive
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential libssl-dev libboost-all-dev
      
      - name: Create build directory
        run: mkdir -p build
      
      - name: Configure CMake
        run: cmake -B build -DCMAKE_BUILD_TYPE=Release
      
      - name: Build
        run: cmake --build build --config Release
      
      - name: Upload binary
        uses: actions/upload-artifact@v5
        with:
          name: cpp-client-linux-binary
          path: cpp-client/build/*
          retention-days: 7

  cpp-client-windows:
    name: Build C++ Client (Windows)
    runs-on: windows-latest
    defaults:
      run:
        working-directory: cpp-client
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          submodules: recursive
      
      - name: Setup vcpkg
        run: |
          git clone https://github.com/Microsoft/vcpkg.git ../vcpkg
          cd ../vcpkg
          .\bootstrap-vcpkg.bat
          .\vcpkg integrate install
      
      - name: Install dependencies
        run: |
          cd ../vcpkg
          .\vcpkg install openssl:x64-windows zlib:x64-windows
      
      - name: Configure CMake
        shell: bash
        run: |
          cmake -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake
      
      - name: Build
        run: cmake --build build --config Release
      
      - name: Copy DLLs
        shell: bash
        run: |
          cp ../vcpkg/installed/x64-windows/bin/libssl-3-x64.dll build/Release/
          cp ../vcpkg/installed/x64-windows/bin/libcrypto-3-x64.dll build/Release/
          cp "C:/Windows/System32/msvcp140.dll" build/Release/ || true
          cp "C:/Windows/System32/vcruntime140.dll" build/Release/ || true
          cp "C:/Windows/System32/vcruntime140_1.dll" build/Release/ || true
      
      - name: Upload binary
        uses: actions/upload-artifact@v5
        with:
          name: cpp-client-windows-binary
          path: cpp-client/build/Release/*.dll cpp-client/build/Release/*.exe
          retention-days: 7

  cdk-infrastructure:
    name: Build CDK Infrastructure
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: deployment/cdk
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Set up Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: deployment/cdk/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build TypeScript
        run: npm run build
      
      - name: Run tests
        run: npm test
        continue-on-error: true
      
      - name: Synthesize CDK
        run: npx cdk synth
      
      - name: Upload CDK template
        uses: actions/upload-artifact@v5
        with:
          name: cdk-template
          path: deployment/cdk/cdk.out
          retention-days: 7

  af-xdp-benchmark:
    name: Build AF_XDP Benchmark
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: af_xdp_zero_copy_perf_benchmark
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libbpf-dev libxdp-dev
        continue-on-error: true
      
      - name: Build AF_XDP components
        run: make
        continue-on-error: true
